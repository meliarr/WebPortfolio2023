---
import '../styles/global.css';
import '../styles/main.css';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = 'Melissa Arroyo | Kansas City Web Designer and Front-End Developer',
	description = 'Welcome! Explore my wide variety of strategic and compelling web design, web development projects, and digital illustrations that showcase my creativity and expertise',
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.ico" />
<link rel="stylesheet" href="">
<style>
  @import url('https://use.typekit.net/mcr8hzs.css');
</style>
<script src="https://kit.fontawesome.com/e70bdb6605.js" crossorigin="anonymous"></script>

    <!-- Animate CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

    <!-- Open Graph Data -->
    <meta property="og:url" content="https://melarroyo.com/" />
    <meta property="og:type" content="website" />
    <meta property="og:title" content="👩🏻‍💻 Melissa Arroyo | Front End Developer" />
    <meta property="og:description" content="Web designer and Front End Developer in Kansas City" />
    <meta property="og:image" content="https://www.melarroyo.com/img/og-img.png" />

    <!-- Twitter Card Data -->
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content="👩🏻‍💻 Melissa Arroyo | Front End Developer" />
    <meta name="twitter:description" content="Web designer and Front End Developer in Kansas City" />
    <meta name="twitter:url" content="https://melarroyo.com/" />
    <meta name="twitter:image" content="https://www.melarroyo.com/img/og-img.png" />

<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-light');

	if (typeof localStorage !== 'undefined') {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('theme-dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>
